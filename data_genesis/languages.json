[
    {
        "id":2,
        "nom":"Spring with PostgreSQL",
        "syntax":{
            "namespace":"package",
            "namespaceStart":";",
            "namespaceEnd":""
        },
        "types":{
            "int":"Integer",
            "double":"Double",
            "string":"String",
            "date":"java.time.LocalDate",
            "timestamp":"java.time.LocalDateTime"
        },
        "typeParsers":{
            "Integer":"Integer.parseInt([value])",
            "Double":"Double.parseDouble([value])",
            "String":"[value]",
            "java.time.LocalDate":"java.time.LocalDate.parse([value])",
            "java.time.LocalDateTime":"java.time.LocalDateTime.parse([value])"
        },
        "skeleton":"springpsql_skeleton",
        "view_directory": "view.zip",
        "projectNameTags":[
            "[projectNameMaj]/settings.gradle",
            "[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "[projectNameMaj]/src/main/resources/application.properties"
        ],
        "additionnalFiles":[],
        "model":{
            "modelImports":[
                "import jakarta.persistence.Entity;",
                "import jakarta.persistence.GeneratedValue;",
                "import jakarta.persistence.GenerationType;",
                "import jakarta.persistence.Id;"
            ],
            "modelExtends":"",
            "modelAnnotations":[
                "@Entity"
            ],
            "modelPrimaryFieldAnnotations":[
                "@Id",
                "@GeneratedValue(strategy=GenerationType.AUTO)"
            ],
            "modelForeignFieldAnnotations":[
                "@jakarta.persistence.ManyToOne",
                "@jakarta.persistence.JoinColumn(name=\"[columnName]\")"
            ],
            "modelFieldAnnotations":[],
            "modelFieldCase":"Min",
            "modelFieldContent":"private [fieldType] [columnName];",
            "modelGetter":"public [fieldType] get[fieldNameMaj](){ return [columnName]; }",
            "modelSetter":"public void set[fieldNameMaj]([fieldType] o){ [columnName]=o; }",
            "modelConstructors":[],
            "modelSavePath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/entities",
            "modelAdditionnalFiles":[
                {
                    "name":"[classNameMaj]Repository.java",
                    "content":"spring/Repository.templ"
                }
            ],
            "modelExtension":"java",
            "modelPackage":"com.[projectNameMin].entities",
            "modelTemplate":"ModelTemplate"
        },
        "controller":{
            "controllerImports":[
                "import org.springframework.beans.factory.annotation.Autowired;",
                "import org.springframework.web.bind.annotation.CrossOrigin;",
                "import org.springframework.web.bind.annotation.PathVariable;",
                "import org.springframework.web.bind.annotation.RequestMapping;",
                "import org.springframework.web.bind.annotation.GetMapping;",
                "import org.springframework.web.bind.annotation.PostMapping;",
                "import org.springframework.web.bind.annotation.PutMapping;",
                "import org.springframework.web.bind.annotation.DeleteMapping;",
                "import org.springframework.web.bind.annotation.RestController;",
                "import org.springframework.web.bind.annotation.RequestBody;",
                "import com.[projectNameMin].entities.[classNameMaj];",
                "import com.[projectNameMin].entities.[classNameMaj]Repository;",
                "import org.springframework.http.HttpStatus;",
                "import org.springframework.http.ResponseEntity;",
                "import java.util.Optional;"
            ],
            "controllerAnnotations":[
                "@RestController",
                "@CrossOrigin(origins = \"*\", allowedHeaders = \"*\")",
                "@RequestMapping(\"/[classNameMin]\")"
            ],
            "controllerExtends":"",
            "controllerName":"[classNameMaj]Controller",
            "controllerFields":[
                {
                    "controllerFieldAnnotations":[
                        "@Autowired"
                    ],
                    "controllerFieldContent":"private [classNameMaj]Repository repo;"
                }
            ],
            "controllerFieldsForeign":{
                "controllerFieldAnnotations":[
                    "@Autowired"
                ],
                "controllerFieldContent":"private com.[projectNameMin].entities.[foreignNameMaj]Repository repo[foreignNameMaj];"
            },
            "controllerChangeInstanciation":{
                "template":"o.set[fieldNameMaj]([content]);",
                "value":"[fieldNameMin]"
            },
            "controllerWhereInstanciation":{
                "template":"where.set[primaryNameMaj]([content]);",
                "value":"[primaryNameMin]"
            },
            "controllerForeignInstanciation":{
                "template":"o.set[fieldNameMaj](repo[foreignType].findById([content]).orElseThrow());",
                "value":"[fieldNameMin]"
            },
            "controllerForeignList":"model.addAttribute(\"[foreignNameMin]s\", repo[foreignType].findAll());",
            "controllerForeignContextParam" : "",
            "controllerForeignContextInstanciation" : "",
            "controllerConstructors":[],
            "controllerForeignInclude":"",
            "controllerMethods":[
                {
                    "controllerMethodAnnotations":[
                        "@PostMapping"
                    ],
                    "controllerMethodParameter":"@RequestBody [classNameMaj] obj",
                    "controllerMethodContent":"spring/controller/springControllerInsert"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerRead"
                },
                {
                    "controllerMethodAnnotations":[
                        "@PutMapping(\"/{id}\")"
                    ],
                    "controllerMethodParameter":"@RequestBody [classNameMaj] obj",
                    "controllerMethodContent":"spring/controller/springControllerUpdate"
                },
                {
                    "controllerMethodAnnotations":[
                        "@DeleteMapping(\"/{id}\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerDelete"
                },
                {
                    "controllerMethodAnnotations":[
                        "@GetMapping(\"/{id}\")"
                    ],
                    "controllerMethodParameter":"",
                    "controllerMethodContent":"spring/controller/springControllerGetById"
                }
            ],
            "controllerSavepath":"[projectNameMaj]/src/main/java/com/[projectNameMin]/controllers",
            "controllerExtension":"java",
            "controllerPackage":"com.[projectNameMin].controllers",
            "controllerTemplate":"ControllerTemplate",
            "controllerNameSuffix":"Controller"
        },
        "view":{
            "viewForeignList":"",
            "viewTableHeader":"<ion-col size=\"3\">[fieldNameFormattedMaj]</ion-col>",
            "foreignFieldGet":"nom",
            "viewTableLine":"<ion-col size=\"3\">{{[classNameMin].[fieldNameMin]}}</ion-col>",
            "viewTableLineForeign": "<ion-col size=\"3\">{{[classNameMin].[fieldNameMin].[foreignFieldGet]}}</ion-col>",
            "viewUpdateFormForeignField":"flamework/view/components/flameworkViewUpdateForeign",
            "viewUpdateFormField":{
                "Integer":"flamework/view/components/flameworkViewUpdateInt",
                "Double":"flamework/view/components/flameworkViewUpdateDouble",
                "String":"flamework/view/components/flameworkViewUpdateString",
                "java.time.LocalDate":"flamework/view/components/flameworkViewUpdateDate",
                "java.time.LocalDateTime":"flamework/view/components/flameworkViewUpdateTimestamp"
            },
            "viewInsertFormForeignField":"flamework/view/components/flameworkViewInsertForeign",
            "viewInsertFormField":{
                "Integer":"flamework/view/components/flameworkViewInsertInt",
                "Double":"flamework/view/components/flameworkViewInsertDouble",
                "String":"flamework/view/components/flameworkViewInsertString",
                "java.time.LocalDate":"flamework/view/components/flameworkViewInsertDate",
                "java.time.LocalDateTime":"flamework/view/components/flameworkViewInsertTimestamp"
            },
            "viewName":{
                "liste":"[classNameMin]-list.page",
                "modifier":"[classNameMin]-update.page",
                "form":"[classNameMin]-form.page"
            },
            "viewContent": {
                "liste": "flamework/view/flameworkViewListe",
                "modifier": "flamework/view/page_html/flameworkViewModifier",
                "form": "flamework/view/page_html/frameworkViewInsert"
            },
            "viewSavePath": {
                "liste": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-list",
                "modifier": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-update",
                "form": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-form"
            },
            "viewExtension":"html"
        },
        "service":{
            "serviceSavePath":"angular/[projectName]/src/app/services",
            "serviceName":"[classNameMin].service",
            "serviceExtension":"ts",
            "specName":"[classNameMin].service.spec",
            "specContent":"spring/view/services/flamework.service.spec.ts.templ",
            "serviceContent":"spring/view/services/flamework.service.ts.templ"
        },
        "componentService": {
            "formData": "[fieldNameMin]: null,",
            "formDataUpdate": "this.formData.[fieldNameMin] = this.[classNameMin] ? this.[classNameMin].[fieldNameMin] : null;",
            "foreignList": "[foreignNameMin]s: any = [];",
            "componentServiceName": {
                "liste": "[classNameMin]-list.page",
                "modifier": "[classNameMin]-update.page",
                "form": "[classNameMin]-form.page",
                "delete": "[classNameMin]-delete.page"
            },
            "componentServiceContent": {
                "liste": "flamework/view/page_ts/flameworkComponentListe",
                "modifier": "flamework/view/page_ts/flameworkComponentModifier",
                "form": "flamework/view/page_ts/flameworkComponentInsert"
            },
            "componentServiceSavePath": {
                "liste": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-list",
                "modifier": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-update",
                "form": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-form",
                "delete": "angular/[projectNameMaj]/src/app/[classNameMin]/[classNameMin]-delete"
            },
            "specName": {
                "liste": "[classNameMin]-list.page.spec",
                "modifier": "[classNameMin]-update.page.spec",
                "form": "[classNameMin]-form.page.spec"
            },
            "specContent": {
                "liste": "flamework/view/flameworkSpecListe",
                "modifier": "flamework/view/page_spec_ts/flameworkSpecModifier",
                "form": "flamework/view/page_spec_ts/flameworkSpecInsert"
            },
            "moduleName": {
                "liste": "[classNameMin]-list.module",
                "modifier": "[classNameMin]-update.module",
                "form": "[classNameMin]-form.module",
                "delete": "[classNameMin]-delete.module"
            },
            "moduleContent": {
                "liste": "flamework/view/module_ts/frameworkModuleList",
                "modifier": "flamework/view/module_ts/frameworkModuleUpdate",
                "form": "flamework/view/module_ts/frameworkModuleForm",
                "delete": "flamework/view/module_ts/frameworkModuleDelete"
            },
            "routingModuleName": {
                "liste": "[classNameMin]-list-routing.module",
                "modifier": "[classNameMin]-update-routing.module",
                "form": "[classNameMin]-form-routing.module",
                "delete": "[classNameMin]-delete-routing.module"
            },
            "routingModuleContent": {
                "liste": "flamework/view/routingpage_ts/flameworkRoutingList",
                "modifier": "flamework/view/routingpage_ts/flameworkRoutingUpdate",
                "form": "flamework/view/routingpage_ts/flameworkRoutingForm",
                "delete": "flamework/view/routingpage_ts/flameworkRoutingDelete"
            },
            "componentGetDataForeign": "flamework/view/components/flameworkComponentGetDataForeign",
            "callGetDataForeign": "this.getData[foreignType]s();",
            "fileExtension": "ts"
        },
        "customChanges":[],
        "navbarLinks":{
            "path":"[projectNameMaj]/src/main/resources/templates/layout/layout.html",
            "link":"<a href=\"/tocrud[classNameMin].do\" class=\"nav-item nav-link\"><i class=\"fa fa-tachometer-alt me-2\"></i>[classNameformattedMaj]</a>"
        }
    }
]